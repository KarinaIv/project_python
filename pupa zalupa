import telebot
from telebot import types

bot = telebot.TeleBot('6634529791:AAH3kuvsJDrba9cNvnompLn55rMvzwqObjY')
existing_metro_stations = ['Авиамоторная', 'Автозаводская', 'Академическая', 'Александровский Сад', 'Алексеевская', 'Алтуфьево', 'Аннино', 'Арбатская', 'Аэропорт', 'Бабушкинская', 'Багратионовская', 'Баррикадная', 'Бауманская', 'Беговая', 'Белорусская', 'Беляево', 'Бибирево', 'Библиотека им.Ленина', 'Битцевский Парк', 'Борисово', 'Боровицкая', 'Боровское шоссе', 'Ботанический Сад', 'Братеево', 'Братиславская', 'Бульвар адмирала Ушакова', 'Бульвар Дмитрия Донского', 'Бунинская аллея', 'Варшавская', 'ВДНХ', 'Владыкино', 'Водный Стадион', 'Войковская', 'Волгоградский Проспект', 'Волжская', 'Волоколамская', 'Воробьевы Горы', 'Востриково', 'ВЦ', 'Выхино', 'Дегунино', 'Деловой центр', 'Динамо', 'Дмитровская', 'Добрынинская', 'Домодедовская', 'Достоевская', 'Дубровка', 'Жулебино', 'Зябликово', 'Измайловская', 'Калужская', 'Кантемировская', 'Каховская', 'Каширская', 'Киевская', 'Китай-Город', 'Кожуховская', 'Коломенская', 'Комсомольская', 'Коньково', 'Красногвардейская', 'Краснопресненская', 'Красносельская', 'Красные Ворота', 'Крестьянская Застава', 'Кропоткинская', 'Крылатское', 'Кузнецкий Мост', 'Кузьминки', 'Кунцевская', 'Курская', 'Кутузовская', 'Ленинский Проспект', 'Лихоборы', 'Лубянка', 'Люблино', 'Маркситская', 'Марьина роща', 'Марьино', 'Маяковская', 'Медведково', 'Международная', 'Менделеевская', 'Минская', 'Митино', 'Молодежная', 'Нагатинская', 'Нагорная', 'Нахимовский Проспект', 'Никулинская', 'Новогиреево', 'Новокосино', 'Новокузнецкая', 'Новокурьяново', 'Новопеределкино', 'Новослободская', 'Новые Черемушки', 'Октябрьская', 'Октябрьское Поле', 'Олимпийская деревня', 'Орехово', 'Останкино', 'Отрадное', 'Охотный Ряд', 'Павелецкая', 'Парк Культуры', 'Парк Победы', 'Партизанская', 'Первомайская', 'Перово', 'Петровско-Разумовская', 'Печатники', 'Пионерская', 'Планерная', 'Площадь Ильича', 'Площадь Революции', 'Площадь Суворова', 'Полежаевская', 'Полянка', 'Пражская', 'Преображенская Площадь', 'Пролетарская', 'Пронская', 'Проспект Вернадского', 'Проспект Мира', 'Профсоюзная', 'Пушкинская', 'Речной Вокзал', 'Рижская', 'Римская', 'Рязанский Проспект', 'Савеловская', 'Свиблово', 'Севастопольская', 'Селигерская', 'Семеновская', 'Серпуховская', 'Славянский бульвар', 'Смоленская', 'Сокол', 'Сокольники', 'Солнцево', 'Спортивная', 'Сретенский бульвар', 'Строгино', 'Студенческая', 'Сухаревская', 'Сходненская', 'Таганская', 'Тверская', 'Театральная', 'Текстильщики', 'Телецентр', 'Теплый Стан', 'Терешково', 'Тимирязевская', 'Третьяковская', 'Трубная', 'Тульская', 'Тургеневская', 'Тушинская', 'Улица ', '905 года', 'Улица академика Королева', 'Улица Академика Янгеля', 'Улица Горчакова', 'Улица Милашенкова', 'Улица Остафьевская', 'Улица Подбельского', 'Улица Сергея Эйзенштейна', 'Улица Скобелевская', 'Улица Старокочаловская', 'Улица Старопотаповская', 'Университет', 'Филевский Парк', 'Фили', 'Фрунзенская', 'Царицыно', 'Цветной бульвар', 'Челобитьево', 'Черкизовская', 'Чертановская', 'Чеховская', 'Чистые Пруды', 'Чкаловская', 'Шаболовская', 'Шипиловская', 'Шоссе Энтузиастов', 'Щелковская', 'Щукинская', 'Электрозаводская', 'Юбилейная', 'Юго-Западная', 'Южная', 'Ясенево']

user_data = {}
@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "Привет! Я помогу тебе найти место для развлечения, прогулки или просвещения."
                                      "Давай начнем. Напиши станцию метро, на которой ты находишься.")
    bot.register_next_step_handler(message, get_metro)

def get_metro(message):
    user_data['metro'] = message.text

    # Проверка, существует ли введенная станция метро
    if user_data['metro'] not in existing_metro_stations:
        bot.send_message(message.chat.id, "Этой станции метро не существует, введите снова.")
        bot.register_next_step_handler(message, get_metro)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    activity_buttons = [types.KeyboardButton(activity) for activity in ["Развлечение", "Прогулка", "Просвещение"]]
    markup.add(*activity_buttons)
    bot.send_message(message.chat.id, "Теперь выбери вид деятельности:", reply_markup=markup)
    bot.register_next_step_handler(message, get_activity)

def get_activity(message):
    user_data['activity'] = message.text.lower()
    if user_data['activity'] in ['развлечение', 'просвещение']:
        bot.send_message(message.chat.id, "Сколько приблизительно ты готов потратить денег?")
        bot.register_next_step_handler(message, get_budget)
    else:
        find_place(message)

def get_budget(message):
    user_data['budget'] = message.text
    find_place(message)

def find_place(message):
    if user_data['activity'] == 'развлечение':
        query = f"Развлечения в Москве на {user_data['budget']}"
    elif user_data['activity'] == 'просвещение':
        query = f"Музеи в Москве на {user_data['budget']}"
    else:
        query = "Где погулять Москва"

    # Здесь должен быть код для выполнения запроса в Интернете
    # и получения данных о найденном месте

    # Вместо этого просто пример ответа бота
    place_name = "Название места"
    metro_name = 'Название станции метро'
    bot.send_message(message.chat.id, f"Я нашел место: {place_name}, станция метро: {metro_name}. "
                                      "Вы довольны выбором? (Да/Нет)")
    bot.register_next_step_handler(message, handle_confirmation)

def handle_confirmation(message):
    if message.text.lower() == 'да':
        bot.send_message(message.chat.id, "Отлично! Увидимся в следующий раз.")
    elif message.text.lower() == 'нет':
        # Повторный запрос при отказе
        bot.send_message(message.chat.id, "Хорошо, давай попробуем еще раз.")
        handle_start(message)
    else:
        bot.send_message(message.chat.id, "Пожалуйста, ответьте 'Да' или 'Нет'.")
        bot.register_next_step_handler(message, handle_confirmation)

if __name__ == "__main__":
    bot.polling(none_stop=True)
